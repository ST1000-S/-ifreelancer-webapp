generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["fullTextIndex", "fullTextSearch"]
  engineType      = "binary"
}

datasource db {
  provider          = "postgresql"
  url               = env("DATABASE_URL")
  directUrl         = env("DIRECT_URL")
  shadowDatabaseUrl = env("SHADOW_DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation("UserSessions", fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String           @id @default(cuid())
  name          String?
  email         String          @unique
  emailVerified DateTime?
  image         String?
  password      String
  role          UserRole        @default(FREELANCER)
  rating        Float?
  resetToken    String?
  resetTokenExpires DateTime?
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt
  profile       Profile?
  accounts      Account[]
  sessions      Session[]       @relation("UserSessions")
  jobs          Job[]           @relation("CreatedJobs")
  applications  JobApplication[] @relation("Applicant")
  reviewsGiven  Review[]        @relation("ReviewsGiven")
  reviewsReceived Review[]      @relation("ReviewsReceived")

  @@map("users")
}

model Profile {
  id            String           @id @default(cuid())
  userId        String           @unique
  bio           String?
  skills        String[]         @default([])
  hourlyRate    Float?
  location      String?
  website       String?
  github        String?
  linkedin      String?
  title         String?
  availability  Boolean          @default(true)
  languages     String[]         @default([])
  phoneNumber   String?
  createdAt     DateTime         @default(now())
  updatedAt     DateTime         @updatedAt
  user          User             @relation(fields: [userId], references: [id], onDelete: Cascade)
  portfolio     Portfolio[]
  experience    WorkExperience[]
  education     Education[]
  certifications Certification[]

  @@index([skills])
  @@index([languages])
}

model Portfolio {
  id          String   @id @default(cuid())
  profileId   String
  title       String
  description String
  imageUrl    String?
  projectUrl  String?
  skills      String[]
  startDate   DateTime
  endDate     DateTime?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  profile     Profile  @relation(fields: [profileId], references: [id], onDelete: Cascade)

  @@index([skills])
}

model WorkExperience {
  id          String   @id @default(cuid())
  profileId   String
  title       String
  company     String
  location    String?
  type        String   // Full-time, Part-time, Contract, etc.
  description String
  startDate   DateTime
  endDate     DateTime?
  current     Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  profile     Profile  @relation(fields: [profileId], references: [id], onDelete: Cascade)
}

model Education {
  id          String   @id @default(cuid())
  profileId   String
  school      String
  degree      String
  fieldOfStudy String
  grade       String?
  description String?
  startDate   DateTime
  endDate     DateTime?
  current     Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  profile     Profile  @relation(fields: [profileId], references: [id], onDelete: Cascade)
}

model Certification {
  id           String   @id @default(cuid())
  profileId    String
  name         String
  issuingBody  String
  issueDate    DateTime
  expiryDate   DateTime?
  credentialId String?
  credentialUrl String?
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  profile      Profile  @relation(fields: [profileId], references: [id], onDelete: Cascade)
}

enum UserRole {
  FREELANCER
  CLIENT
  ADMIN
}

enum JobType {
  REMOTE
  ONSITE
  HYBRID
}

enum JobStatus {
  OPEN
  IN_PROGRESS
  COMPLETED
  CANCELLED
}

enum ApplicationStatus {
  PENDING
  ACCEPTED
  REJECTED
  WITHDRAWN
}

enum ExperienceLevel {
  BEGINNER
  INTERMEDIATE
  EXPERT
}

enum JobCategory {
  WEB_DEVELOPMENT
  MOBILE_DEVELOPMENT
  UI_UX_DESIGN
  GRAPHIC_DESIGN
  CONTENT_WRITING
  DIGITAL_MARKETING
  DATA_SCIENCE
  OTHER
}

model Job {
  id            String           @id @default(cuid())
  title         String
  description   String
  budget        Float
  budgetType    String          @default("FIXED")
  type          JobType
  status        JobStatus        @default(OPEN)
  category      JobCategory
  experienceLevel String         @default("BEGINNER")
  availability  String          @default("FULL_TIME")
  location      String?
  duration      Int?             // Duration in days
  skills        String[]
  createdAt     DateTime         @default(now())
  updatedAt     DateTime         @updatedAt
  creatorId     String
  creator       User             @relation("CreatedJobs", fields: [creatorId], references: [id])
  applications  JobApplication[] @relation("JobApplications")
  reviews       Review[]         @relation("JobReviews")

  @@index([creatorId])
  @@index([status])
  @@index([type])
  @@index([category])
  @@index([skills])
  @@index([createdAt])
  @@index([budget])
}

model JobApplication {
  id          String    @id @default(cuid())
  status      ApplicationStatus @default(PENDING)
  coverLetter String?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  applicantId String
  jobId       String
  applicant   User      @relation("Applicant", fields: [applicantId], references: [id])
  job         Job       @relation("JobApplications", fields: [jobId], references: [id])

  @@index([applicantId])
  @@index([jobId])
}

model Review {
  id          String   @id @default(cuid())
  rating      Float
  comment     String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  jobId       String
  reviewerId  String
  revieweeId  String
  job         Job      @relation("JobReviews", fields: [jobId], references: [id], onDelete: Cascade)
  reviewer    User     @relation("ReviewsGiven", fields: [reviewerId], references: [id], onDelete: Cascade)
  reviewee    User     @relation("ReviewsReceived", fields: [revieweeId], references: [id], onDelete: Cascade)

  @@index([jobId])
  @@index([reviewerId])
  @@index([revieweeId])
}

enum JobDuration {
  LESS_THAN_1_MONTH
  ONE_TO_THREE_MONTHS
  THREE_TO_SIX_MONTHS
  MORE_THAN_6_MONTHS
}

enum JobAvailability {
  FULL_TIME
  PART_TIME
  FLEXIBLE
}
