generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["fullTextIndex", "fullTextSearch"]
  engineType      = "binary"
}

datasource db {
  provider          = "postgresql"
  url               = env("DATABASE_URL")
  directUrl         = env("DIRECT_URL")
  shadowDatabaseUrl = env("SHADOW_DATABASE_URL")
}

enum UserRole {
  FREELANCER
  CLIENT
  ADMIN
}

enum ApplicationStatus {
  PENDING
  ACCEPTED
  REJECTED
  WITHDRAWN
}

enum JobStatus {
  OPEN
  IN_PROGRESS
  COMPLETED
  CANCELLED
}

enum JobType {
  FIXED
  HOURLY
  REMOTE
  ONSITE
  HYBRID
}

enum JobDuration {
  LESS_THAN_1_MONTH
  ONE_TO_THREE_MONTHS
  THREE_TO_SIX_MONTHS
  MORE_THAN_6_MONTHS
}

enum JobAvailability {
  FULL_TIME
  PART_TIME
  CONTRACT
  FREELANCE
  FLEXIBLE
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id                String           @id @default(cuid())
  name              String?
  email             String?          @unique
  emailVerified     DateTime?
  image             String?
  password          String?
  role              UserRole         @default(FREELANCER)
  rating            Float?
  resetToken        String?
  resetTokenExpires DateTime?
  accounts          Account[]
  sessions          Session[]
  profile           Profile?
  createdJobs       Job[]           @relation("CreatedJobs")
  applications      Application[]   @relation("UserApplications")
  reviewsGiven      Review[]        @relation("ReviewsGiven")
  reviewsReceived   Review[]        @relation("ReviewsReceived")
  createdAt         DateTime         @default(now())
  updatedAt         DateTime         @updatedAt

  @@map("users")
}

model Profile {
  id             String           @id @default(cuid())
  userId         String           @unique
  title          String?
  bio            String?          @db.Text
  image          String?
  rating         Float?
  hourlyRate     Float?
  availability   JobAvailability?
  skills         Skill[]
  portfolios     Portfolio[]
  workExperience WorkExperience[]
  education      Education[]
  certifications Certification[]
  user           User            @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt      DateTime        @default(now())
  updatedAt      DateTime        @updatedAt

  @@index([userId])
}

model Portfolio {
  id          String   @id @default(cuid())
  title       String
  description String?  @db.Text
  link        String?
  image       String?
  profileId   String
  profile     Profile  @relation(fields: [profileId], references: [id], onDelete: Cascade)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model WorkExperience {
  id          String   @id @default(cuid())
  profileId   String
  title       String
  company     String
  location    String?
  type        String   // Full-time, Part-time, Contract, etc.
  description String
  startDate   DateTime
  endDate     DateTime?
  current     Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  profile     Profile  @relation(fields: [profileId], references: [id], onDelete: Cascade)
}

model Education {
  id          String   @id @default(cuid())
  profileId   String
  school      String
  degree      String
  fieldOfStudy String
  grade       String?
  description String?
  startDate   DateTime
  endDate     DateTime?
  current     Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  profile     Profile  @relation(fields: [profileId], references: [id], onDelete: Cascade)
}

model Certification {
  id           String   @id @default(cuid())
  profileId    String
  name         String
  issuingBody  String
  issueDate    DateTime
  expiryDate   DateTime?
  credentialId String?
  credentialUrl String?
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  profile      Profile  @relation(fields: [profileId], references: [id], onDelete: Cascade)
}

enum JobCategory {
  WEB_DEVELOPMENT
  MOBILE_DEVELOPMENT
  UI_UX_DESIGN
  GRAPHIC_DESIGN
  CONTENT_WRITING
  DIGITAL_MARKETING
  DATA_SCIENCE
  OTHER
}

model Job {
  id            String           @id @default(cuid())
  title         String
  description   String          @db.Text
  type          JobType
  budget        Int
  category      String
  location      String?
  duration      JobDuration
  skills        Skill[]
  status        JobStatus       @default(OPEN)
  creatorId     String
  creator       User            @relation("CreatedJobs", fields: [creatorId], references: [id], onDelete: Cascade)
  applications  Application[]   @relation("JobApplications")
  reviews       Review[]        @relation("JobReviews")
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt

  @@index([creatorId])
  @@index([title])
  @@index([description])
}

model Application {
  id          String            @id @default(cuid())
  jobId       String
  applicantId String
  status      ApplicationStatus @default(PENDING)
  coverLetter String?          @db.Text
  proposal    Int
  job         Job              @relation("JobApplications", fields: [jobId], references: [id], onDelete: Cascade)
  applicant   User             @relation("UserApplications", fields: [applicantId], references: [id], onDelete: Cascade)
  createdAt   DateTime         @default(now())
  updatedAt   DateTime         @updatedAt

  @@unique([jobId, applicantId])
  @@index([jobId])
  @@index([applicantId])
}

model Review {
  id          String   @id @default(cuid())
  rating      Float
  comment     String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  jobId       String
  reviewerId  String
  revieweeId  String
  job         Job      @relation("JobReviews", fields: [jobId], references: [id], onDelete: Cascade)
  reviewer    User     @relation("ReviewsGiven", fields: [reviewerId], references: [id], onDelete: Cascade)
  reviewee    User     @relation("ReviewsReceived", fields: [revieweeId], references: [id], onDelete: Cascade)

  @@index([jobId])
  @@index([reviewerId])
  @@index([revieweeId])
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Skill {
  id        String    @id @default(cuid())
  name      String    @unique
  profiles  Profile[]
  jobs      Job[]
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}
